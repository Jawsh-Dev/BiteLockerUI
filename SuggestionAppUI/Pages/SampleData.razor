@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>Sample Data</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>


@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        /*UserModel user = new()
            {
                FirstName = "Josh",
                LastName = "Vaughn",
                EmailAddress = "josh@test.com",
                DisplayName = "Sample Josh Vaughn",
                ObjectIdentifier = "abc-123"
            };
        await userData.CreateUser(user);*/

        var foundUser = await userData.GetUserFromAuthentication("abc-123");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        SuggestionModel suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                Suggestion = "Torta",
                Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                OwnerNotes = "../images/TortaImg.jpg"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Pizza",
                Description = "This is a Recipe created by the sample data generation method.",
                SuggestionStatus = statuses[0],
                OwnerNotes = "../images/PizzaImg.jpg"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "Naan",
                Description = "This is a Recipe created by the sample data generation method.",
                SuggestionStatus = statuses[1],
                OwnerNotes = "../images/NaanImg.jpg"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                Suggestion = "Sushi",
                Description = "This is a recipe created by the sample data generation method.",
                SuggestionStatus = statuses[2],
                UserVotes = votes,
                OwnerNotes = "../images/SushiImg.jpg"
            };
        await suggestionData.CreateSuggestion(suggestion);

        votes.Add("4");

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                Suggestion = "Burger",
                Description = "This is a recipe created by the sample data generation method.",
                SuggestionStatus = statuses[3],
                UserVotes = votes,
                OwnerNotes = "../images/BurgerImg.jpg"
            };
        await suggestionData.CreateSuggestion(suggestion);
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if (categories?.Count > 0)
        {
            return;
        }

        CategoryModel cat = new()
            {
                CategoryName = "Mexican",
                CategoryDescription = "Mexican food"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Italian",
                CategoryDescription = "Italian food"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Indian",
                CategoryDescription = "Indian food"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Japanese",
                CategoryDescription = "Japanese food"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "American",
                CategoryDescription = "American food"
            };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel stat = new()
            {
                StatusName = "Completed",
                StatusDescription = "The recipe was accepted and the corresponding item was created."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Watching",
                StatusDescription = "The recipe is interesting. We are watching to see how much interest there is in it."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "The recipe was selected and it will be released soon."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Dismissed",
                StatusDescription = "The recipe was not something that we are going to undertake."
            };
        await statusData.CreateStatus(stat);

        statusesCreated = true;
    }
  }

